apply plugin: 'com.android.application'

android {
    signingConfigs {
        releaseConfig {
            keyAlias 'test_jenkins_release'
            keyPassword ALIAS_PASSWORD
            storeFile file('./../keystore/test_jenkins_release_key.jks')
            storePassword STORE_PASSWORD
        }
    }

    //渠道Flavors
    flavorDimensions("flavor")
    productFlavors {
        xiaomi {
            dimension "flavor"
        }
        wandoujia {
            dimension "flavor"
        }
    }

    compileSdkVersion compile_sdk_version
    buildToolsVersion build_tools_version

    defaultConfig {
        applicationId project.APPLICATION_ID
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName VERSION_NAME
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
        debug {
            signingConfig signingConfigs.releaseConfig
        }
    }

    //修改生成的apk名字及输出文件夹
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                // 拼接apk名称
                def flavorName = ""

                productFlavors.eachWithIndex { productFlavor, int index ->
                    flavorName += productFlavor.name
                    if (index != (productFlavors.size()-1)) {
                        flavorName += "-"
                    }
                }
                def fileName = "com.opos.ads#ads-${flavorName}${variant.buildType.name}-${defaultConfig.versionName}-${buildTime()}.apk"
                outputFileName = fileName

                // 是否为Jenkins打包，输出路径不同
                def outDirectory
                if ("true".equals(IS_JENKINS)) {
                    def date = Calendar.getInstance()
                    def timeStr = date.get(Calendar.YEAR) + (((date.get(Calendar.MONTH) + 1) >= 10 ? date.get(Calendar.MONTH) + 1 : "0" + (date.get(Calendar.MONTH) + 1))) + (date.get(Calendar.DAY_OF_MONTH) >= 10 ? date.get(Calendar.DAY_OF_MONTH) : "0" + date.get(Calendar.DAY_OF_MONTH)) + "_" + (date.get(Calendar.HOUR_OF_DAY) >= 10 ? date.get(Calendar.HOUR_OF_DAY) : "0" + date.get(Calendar.HOUR_OF_DAY)) + (date.get(Calendar.MINUTE) >= 10 ? date.get(Calendar.MINUTE) : "0" + date.get(Calendar.MINUTE))
                    outDirectory = BUILD_PATH_JENKINS
                    outDirectory = outDirectory + "\\" + flavorName + "\\" + variant.buildType.name + "\\" + timeStr
                } else {
                    outDirectory = outputFile.parent
                }
                variant.getPackageApplication().outputDirectory = new File(outDirectory)
                outputFileName = fileName
            }
        }
    }
}

// 返回编译Apk日期函数
def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
}

// 在最后一个task后执行生成二维码胡操作
//gradle.taskGraph.whenReady { graph ->
//    graph.allTasks[graph.allTasks.size()-1].doLast {
//        println '---------------------doLast------------------------'
//        // jenkins打包生成二维码
//        if ("true".equals(IS_JENKINS)) {
//            tasks.create(name: 'generateOR', type: Exec, overwrite: true) {
//                println '---------------------generateQR------------------------'
//                // 执行jenkinsQR.py，生成二维码
//                def pycmd = "python jenkinsQR.py " + BUILD_TYPE + ' ' + timeStr + ' ' + BUILD_PATH_JENKINS + ' ' + fileName
//                pycmd.execute()
//                println pycmd
//            }
//        }
//    }
//}
